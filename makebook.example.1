#!/bin/sh
# doesnt include the cover because printed on thicker paper
# list of [p_start] chaptername [n_nbpage]
sources="p_3 aftercover n_2	summary n_4	intro n_14	realstart n_12		maincontent n_50	conclusion n_10"

####################################################################"
# Paramétrages

output=mybook

pdfwithimages=oui

# set to "-vecto" to use "-vecto" version of files and config
vectoopt=""

# other user options
setopt=""

#checkpagenum=''
checkpagenum='check'
pagenumwhy='' # reason why start page is set : 'set' or 'computed'echo

sourcespattern=1
# 0 : no change to filename in sources
# 1 : nomfich stands for filename/filename(.sla)
# 2 : nomfich stands for filename/PAO/filename(.sla)
# end new for aranya

# Rq : Nb d'éléments d'un array : ${#array[@]}    ou     ${#array[*]}

check='oui'		# '' to not check (only merge chapter pdfs)
vconfig=''
vcheck=''

searched=''	 	# searched string
xmlsearched=''	# xml searched string
nbfound=0

nopdf=''
pdfopt=''

####################################################################

reset
. shellcolors

while [ "$stopoptions" = "" ]
do
	stopoptions=true

	if  [ "$1" = '-?' ]
	then
		echo "mak makes the global PDF"
		echo "due to inline config, name of produced PDF is $output.pdf"
		echo 
		echo "Options :"
		echo "-? : get this help"
		echo "-set : set value to correct value"
		echo "-pagenum : also checks the first page number  of each doc"
		echo "-nopagenum : dont check the first page number of each doc"
		echo "-nocheck : dont check anything, just merge all chapter's pdfs"
		echo "-nopdf : dont create nor merge pdfs (only checks)"
		echo "-forcepdf : force all pdf (re)creation, even when it exists allready"
		echo "-vconfig : verbose output about config files"
		echo "-vcheck : very verbose output about check"
		echo '-find "word or phrase" : find occurences in all chapters text'
		echo '-xmlfind "string" : find occurences of string in all chapters SLA file (text + xml tags)'
		echo "beta :"
		echo "-vecto : uses -vecto version of each file (sla and pdf)"
		echo
		exit
	fi

	if [ "$1" = "-nocheck" ]
	then
		shift
		check=''
		echo "Chapter PDFs will be merged. No check will happen"
		break
	fi

	if [ "$1" = "-vconfig" ]
	then
		vconfig=$1
		shift
		break
	fi

	if [ "$1" = "-vcheck" ]
	then
		vcheck=$1
		shift
		break
	fi

	if [ "$1" = "-find" ]
	then
		shift
		if [ "$1" = "" ]
		then
			echo "${ESC_error}-find option must have additionnal parameter$ESC_normal"
			exit
		fi
		searched="$1"
		rm .found.tmp
		check=''
		nopdf='-nopdf'
		continue
	fi

	if [ "$1" = "-xmlfind" ]
	then
		shift
		if [ "$1" = "" ]
		then
			echo "${ESC_error}-xmlfind option must have additionnal parameter$ESC_normal"
			exit
		fi
		xmlsearched="$1"
		rm .found.tmp
		check=''
		nopdf='-nopdf'
		continue
	fi

	if [ "$1" = "-set" ]
	then
		shift
		setopt='-set'
		stopoptions=''
		nopdf='-nopdf'
		continue
	fi

	if [ "$1" = "-nopdf" ]
	then
		shift
		nopdf='-nopdf'
		continue
	fi

	if [ "$1" = "-forcepdf" ]
	then
		shift
		nopdf=''
		pdfopt='-forcepdf'
		continue
	fi

	if [ "$1" = "-vecto" ]
	then
		shift
		vectoopt='-vecto'
		stopoptions=''
		continue
	fi

	if [ "$1" = "-nopagenum" ]
	then
		shift
		checkpagenum=''
		stopoptions=''
		continue
	fi
done

####################################################################"
verboseopt="$vconfig $vcheck"

listepdf=""
pagenumopt=''

numpagecourant=1
for fic in $sources
do 
	if [ "${fic#p_}" != "$fic" ] && [ $checkpagenum = 'check' ]
	then
		numpagecourant=${fic#p_}
		pagenumopt="-pagenum $numpagecourant"
		echo "Début page $numpagecourant"
		pagenumwhy=set
		continue
	fi

	if [ "${fic#n_}" != "$fic" ] && [ $checkpagenum = 'check' ]
	then
		numpagecourant=$(( $numpagecourant+${fic#n_} ))
		pagenumopt="-pagenum $numpagecourant"
		echo "${fic#n_} pages"
		pagenumwhy=computed
		continue
	fi

	if [ "$sourcespattern" = 1 ]
	then
		fic="$fic/$fic"
	elif [ "$sourcespattern" = 2 ]
	then 
		fic="$fic/PAO/$fic"
	fi

	fic="$fic$vecto"
	[ ! -f $fic.sla ] && echo Error : missing $fic.sla file && exit

	echo
	echo -n $fic
	[ "$pagenumopt" != "" ] && echo " : page $numpagecourant ($pagenumwhy)"
	[ "$pagenumopt" = "" ] && echo "${ESC_error}no starting page ?$ESC_normal"
	pagenumwhy=''

	if [ "$searched" != '' ] || [ "$xmlsearched" != '' ]
	then
		# Enlever d'abord les césures avant de chercher $searched, et même $xmlsearched
		# césures conditionnelles = caractère Unicode U+00AD
		# http://stackoverflow.com/questions/8562354/remove-unicode-characters-from-textfiles-sed-other-bash-shell-methods
		# La commande `echo -ne '\u00AD' | xxd` donne c2ad qu'il faut utiliser avec \x dans `sed 's/...'` = 
		cleansla="$fic.clean.sla"
		sed -e 's/\xc2\xad//g' "$fic.sla" > "$cleansla"
	fi

	if [ "$searched" != '' ]
	then
		count=`grep -i "<ITEXT[^>]*CH=" "$cleansla" | grep -c -o -i "\"[^\"]*$searched[^\"]*\""`
		echo Search for "$searched" : $count results
		if [ "$count" != "0" ]
		then
			nbfound=$(( $nbfound+$count ))

			echo $ESC_yellow
			grep -ni "<ITEXT[^>]*CH=" "$cleansla" | grep -i "\"[^\"]*$searched[^\"]*\"" | sed -e 's/<ITEXT[^>]*CH="//' | sed -e 's/"\/>//'
			echo $ESC_normal
			
			# -n : line number
			# /dev/null is added so grep believes there is more than one file and outputs the filename
			grep -ni "<ITEXT[^>]*CH=\"[^\"]*$searched[^\"]*\"" "$cleansla" /dev/null | sed -e 's/<ITEXT[^>]*CH="//' | sed -e 's/"\/>//' >> .found.tmp
		fi
		rm $cleansla
	fi
	
	if [ "$xmlsearched" != '' ]
	then
		# fixme : malgré les -i ça n'a pas l'air case-insensitif (vérifier)
		count=`grep -c -o -i "$xmlsearched" "$cleansla"`
		echo Search for "$xmlsearched" : $count results
		if [ "$count" != "0" ]
		then
			nbfound=$(( $nbfound+$count ))

			echo $ESC_yellow
			grep -ni "$xmlsearched" "$cleansla"
			echo $ESC_normal
			
			# -n : line number
			# /dev/null is added so grep believes there is more than one file and outputs the filename
			grep -ni "$xmlsearched" "$cleansla" /dev/null >> .found.tmp
		fi
		rm $cleansla
	fi
	
	if [ "$check" = "oui" ] 
	then
		# echo slacheck $vectoopt $setopt $pagenumopt $pdfopt $verboseopt $fic
		slacheck $vectoopt $setopt $pagenumopt $pdfopt $verboseopt $fic
	fi

	listepdf="$listepdf $fic.pdf"
	if [ "$pdfwithimages" = "no" ]
	then
		mv -b "$fic/images" "$fic/images.bak"
	fi
done

if [ "$1" = "-nopdf" ] || [ "$1" = "nopdf" ]
then
	exit
fi


if [ "$nopdf" = "" ]
then
	mv $output.pdf $output.pdf.bak

	# add some special file as a last page cover
	# listepdf="$listepdf separettes/p68-HR.pdf"

	pdftk $listepdf cat output $output.pdf
	if [ -f $output.pdf  ] 
	then
		ls -ltr $output.pdf 
		echo $output.pdf created OK  
		evince $output.pdf &
	fi
fi

# création d'une version sans marge (marges enlevées à l'arrache pour l'instant) : un peu utile pour impression un peu plus grand en pleine page
# pdfcrop --margins '-25 -25 -25 -25' $output.pdf normargin_$output.pdf
# [ -f normargin_$output.pdf  ] && evince normargin_$output.pdf & ls -ltr normargin_$output.pdf ; echo normargin_$output.pdf created OK

if [ "$pdfwithimages" = "no" ]
then
	for fic in $sources
	do 
		fic=$fic$vecto
		mv -b "$fic/images.bak" "$fic/images"
	done
fi

if [ "$searched$xmlsearched" != '' ]
then
	echo Done
	echo 
	echo ${ESC_yellow}Searching \'$searched$xmlsearched\' :  $nbfound results found in whole book$ESC_normal
	if [ $nbfound != 0 ]
	then
		cat .found.tmp
		rm .found.tmp
	fi
fi
