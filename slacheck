#!/bin/sh

# set -x  # for a detailed trace

# *****************************
# configs for defaults features

. slacheck.defaultconfig

[ -f "./slacheck.config" ] && . ./slacheck.config

[ ! -f "./slacheck.config" ] && echo No local config, using default

# =====================================================================

setrequested=''

while [ "$stopoptions" = "" ] 
do
	stopoptions=true
	
	if  [ "$1" = '-?' ]; then
		echo "slacheck checks workflow validity of a scribus file"
		echo "Options :"
		echo "-? : get this help"
		echo "-v : verbose output"
		echo "-pdfignore : dont check whether pdf exists and dont compare PDF and SLA last edit dates"
		echo "-pdfcheck : check pdf, but dont re-create it in case required"
		echo "-notimg : dont check for correct included image files"
		echo "-set : change the SLA so it conforms to project standards (save in .bak)"
		echo "-vecto : all fonts must be vectorized - NOT IMPLEMENTED"
		echo "-pagenum PPP : check that section begins at page number PPP"
		echo
	elif [ "$1" = "-v" ]; then
		shift
		verboseoption='-v'
		stopoptions=''
	elif [ "$1" = "-pdfignore" ]; then
		shift
		pdf='ignore'
		stopoptions=''
	elif [ "$1" = "-pdfcheck" ]; then
		shift
		pdf='check'
		stopoptions=''
	elif [ "$1" = "-notimg" ]; then
		shift
		checkimg='dontcheck'
		stopoptions=''
	elif [ "$1" = "-set" ]; then
		shift
		actionoption="$actionoption -set"
		setrequested="-set"
		echo "Warning : SLA file will be altered in case it doesnt fit config"
		stopoptions=''
	elif [ "$1" = "-vecto" ];	then
		shift
		vecto="-vecto"
		stopoptions=''
		echo "Error : -vecto option IS NOT IMPLEMENTED"
		exit
	elif [ "$1" = "-pagenum" ]; then
		shift
		checkpagenums='check'
		if [ "$1" = '' ]; then
			echo "Error : missing page numer after -pagenum"
			exit;
		fi
		pagenumval="$1"
		shift
		stopoptions=''
	fi
done

[ ! -f "$1.sla" ] && echo Error : missing $1.sla file && exit

[ -f "./$1.config" ] && echo "Loading file config for $1.sla" && . "./$1.config"

# -H : affiche le nom de fichier
# -o : n'affiche que la partie matchant le pattern et non toute la ligne
# -i : case insensitif
# -E : c'est une regexp (permettrait d'extraire plus de caractères environnant par ex)
# -v : élimine les lignes vérifiant le pattern
grep -i "<ITEXT CH=" "$1.sla" | grep -o -i "\"[^\"]*aaa[^\"]*\"" 
grep -i "<ITEXT CH=" "$1.sla" | grep -o -i "\"[^\"]*ppp[^\"]*\"" 
grep -i "<ITEXT CH=" "$1.sla" | grep -o -i "\"[^\"]*xxx[^\"]*\"" 

alloptions="$verboseoption $actionoption"

# As for color profiles, the correct values to be checked are :
# <DOCUMENT ... DPMo="sRGB" DPPr="ISO Coated v2 300% (ECI)" DPIn="sRGB" DPInCMYK="ISO Coated v2 300% (ECI)" DPIn2="sRGB" DPIn3="ISO Coated v2 300% (ECI)" ...>
# <PDF ... SolidP="sRGB" ImageP="sRGB" PrintP="ISO Coated v2 300% (ECI)"  ...>

slacheckattr $alloptions "$1" DOCUMENT 	DPIn 		"$RGBprof" 		"RGB color profile"
slacheckattr $alloptions "$1" DOCUMENT 	DPIn2		"$RGBprof"		"RGB color profile"

slacheckattr $alloptions "$1" DOCUMENT 	DPPr 		"$CMYKprof"		"CMYK color profile"
slacheckattr $alloptions "$1" DOCUMENT 	DPInCMYK	"$CMYKprof"		"CMYK color profile"
slacheckattr $alloptions "$1" DOCUMENT 	DPIn3		"$CMYKprof"		"CMYK color profile"

slacheckattr $alloptions "$1" PDF 		Grayscale	"$Grayscale" 		"PDF output to grayscale"
slacheckattr $alloptions "$1" PDF 		RGBMode 	"$RGBMode" 		"PDF output RGB for screen (rather than CMYK for printer)"

slacheckattr $alloptions "$1" PDF		SolidP 		"$RGBprof"		"RGBcolor profile"
slacheckattr $alloptions "$1" PDF		ImageP 		"$RGBprof"		"RGB color profile"

slacheckattr $alloptions "$1" PDF		PrintP		"$CMYKprof"		"CMYK color profile"

# other PDF output checks

slacheckattr $alloptions "$1" PDF		PicRes		"$resolution"	"Résolution des images"
slacheckattr $alloptions "$1" PDF		Resolution	"$resolution"	"Résolution des EPS"
slacheckattr $alloptions "$1" PDF		Compress	"$Compress"		"Compression des images"
slacheckattr $alloptions "$1" PDF		RecalcPic	"$RecalcPic"	"Limiter la résolution des images"
slacheckattr $alloptions "$1" PDF		CMethod		"$CMethod"		"Méthode de compression des images"
slacheckattr $alloptions "$1" PDF		Quality		"$Quality"		"Qualité de la compression des images"
slacheckattr $alloptions "$1" PDF		EmbedPDF	"$EmbedPDF"		"Embed PDFs"
slacheckattr $alloptions "$1" PDF		Version		"$PDFversion"	"Version PDF - eg 15 for 1.5"

slacheckattr $alloptions "$1" PDF	useDocBleeds 	"$useDocBleeds"	"Utiliser le fond perdu du document"
slacheckattr $alloptions "$1" PDF		BTop		"$BTop"			"Fond perdu en haut"
slacheckattr $alloptions "$1" PDF		BLeft		"$BLeft"		"Fond perdu intérieur (mais indiqué Left ?)"
slacheckattr $alloptions "$1" PDF		BRight		"$BRight"		"Fond perdu extérieur (mais indiqué Right ?)"
slacheckattr $alloptions "$1" PDF		BBottom		"$BBottom"		"Fond perdu en bas"

slacheckattr $alloptions "$1" PDF		cropMarks	"$cropMarks"	"Traits de coupe"
slacheckattr $alloptions "$1" PDF		markLength	"$markLength"	"Longueur des traits de coupe"
slacheckattr $alloptions "$1" PDF		markOffset	"$markOffset"	"Décalage des traits de coupe"

slacheckattr $alloptions "$1" PDF		bleedMarks	"$bleedMarks"	"Traits de fond perdu"
slacheckattr $alloptions "$1" PDF	registrationMarks	"$registrationMarks"	"registrationMarks"
slacheckattr $alloptions "$1" PDF	colorMarks		"$colorMarks"	"colorMarks"

# Check Pages attributes

slacheckattr $alloptions -all "$1" PAGE 		PAGEWIDTH	"$pagewidth"	"Largeur de page A5=420.944881889764"
slacheckattr $alloptions -all "$1" MASTERPAGE 	PAGEWIDTH	"$pagewidth"	"Largeur de page A5=420.944881889764"
slacheckattr $alloptions -all "$1" PAGE 		PAGEHEIGHT	"$pageheight"	"Hauteur de page A5=595.275590551181"
slacheckattr $alloptions -all "$1" MASTERPAGE 	PAGEHEIGHT	"$pageheight"	"Hauteur de page A5=595.275590551181"


if [ "$checkpagenums" = 'check' ]
then
	slacheckattr $alloptions "$1" Section	Start 	$pagenumval		"La première page doit être la $pagenumval"
fi

if [ "$setrequested" = "-set" ]
then
	exit;
# else
#	echo "Attributes have been checked. In case there are mistakes you can fix them using -set option"
fi

if [ "$pdf" = 'check' ] || [ "$pdf" = 'create' ]
then
	# on vérifie qu'il y a un PDF et qu'il a été généré APRÈS l'édition du SLA
	# stat -c %y n54.pdf : date de modif de n54.pdf
	if [ ! -f "$1.pdf" ]
	then
		echo Missing $1.pdf
	elif [ "$1.sla" -nt "$1.pdf" ]
	then
		datesla=`stat -c %y "$1.sla"`
		datepdf=`stat -c %y "$1.pdf"`
		echo "\033[1;31mWarning :\033[0m $1.sla has been edited and saved later than last PDF output : $1.sla = ${datesla%:*} ; $1.pdf = ${datepdf%:*}"
	fi

	if [ ! -f "$1.pdf" ] || [ "$1.sla" -nt "$1.pdf" ]
	then
		if [ "$pdf" = 'create' ]
		then
			if [ -f "$1.pdf" ]
			then 
				rm "$1.pdf" 
				echo "J'efface $1.pdf"
				if [ -f "$1.pdf" ]
				then 
					echo "Erreur $1.pdf n'a pas été effacé"
				fi
			fi
			echo "je (re)crée $1.pdf"
			$scribuscommand -g -ns -py slatopdf.py -- $1.sla 2> /dev/null
			if [ -f "$1.pdf" ]
			then 
				echo "OK $1.pdf a bien été recréé"
			else
				echo "Erreur : $1.pdf n'a pas été recréé"
			fi
			
		fi
	fi
fi

if [ "$checkimg" = 'check' ]
then
	slacheckimages "$1"
fi

if [ "$checkfonts" = 'check' ]
then
	slacheckfonts $vecto "$1"
fi
