#!/bin/bash

# set -x

# shell memos :
# 	${parameter=default}, ${parameter:=default} # If parameter not set, set it to default.

. shellcolors

# *****************************
# SHELL configs for defaults features
scribuscommand="scribus" # can be changed for some of the files configs so as to avoid scribus crashes

checkimg='check'		# check that used images are in images subfolder

checkfonts='check'		# check that used fonts are either embeded or subset
comment='comment'		# display XXX, YYY, PPP, QQQ, RRR, SSS or AAA, BBB,  comments
vecto=''				# leave fonts as declared in sla = dont force all fonts vectorization 
checkpagenums='check'	# do check startpage num
dopdf='create' 		 	# dopdf = create : checks pdf exists and is recent and recreate it when not 
						# dopdf = check : only checks
						# dopdf = ignore : neither checks nor (re)creates pdf
						# dopdf = force : (re)create all pdf whether existing or recent or not

sla_actionoption='' 	# default : dont change SLAs
					# "-set" edit sla so it checks config specs

verboseoption=''	# default : not verbose
# '-v' for verbose

# =====================================================================
vcheck=''
vconfig=''
setrequested=''
sla_actionoption=''
pagenumval=''

# *****************************
# config for scribus project manager general default features

. slacheck.defaultconfig

# *****************************
# config for project (must be specified... unless project is default project which is unlikely)
# project config can be either in local or parent folder
[ -f "./slacheck.config" ] && . ./slacheck.config $vconfig
[ ! -f "./slacheck.config" ] && [ -f "../slacheck.config" ] && echo -e "${ESC_warning}Parent's folder default slacheck.config is used" &&  . ../slacheck.config $vconfig
[ ! -f "./slacheck.config" ] && [ -f "../../slacheck.config" ] && echo -e "${ESC_warning}Grand-parent's folder default slacheck.config is used" && . ../../slacheck.config $vconfig
[ ! -f "./slacheck.config" ] && [ ! -f "../slacheck.config" ] && [ ! -f "../../slacheck.config" ] && echo -e "${ESC_warning} No local config for project, using default for $1.sla$ESC_normal"

while [ "$stopoptions" = "" ] 
do
	stopoptions=true
	
	if  [ "$1" = '-?' ]; then
		echo "slacheck checks workflow validity of a scribus file"
		echo "Options :"
		echo "-? : get this help"
		echo "-vconfig : verbose config output"
		echo "-vcheck : verbose check output"
		echo "-pdfignore : dont check whether pdf exists and dont compare PDF and SLA last edit dates"
		echo "-pdfcheck : check pdf, but dont re-create it in case required"
		echo "-nofontcheck : doesnt check fonts"
		echo "-nocomment : dont display comments (user can mark comments with XXX, YYY, PPP, QQQ, RRR, SSS, AAA or BBB keyword)"
		echo "-forcepdf : (re)create pdf even when it exists allready"
		echo "-notimg : dont check for correct included image files"
		echo "-set : change the SLA so it conforms to project standards (save in .bak)"
		echo "-vecto : all fonts must be vectorized - BETA" # il faut FontEmbedding="1" (logique booléenne inversée)
		echo "-pagenum PPP : check that section begins at page number PPP"
		echo "-nobleeds : no cropmarks + useDocBleeds"
		echo
		exit
	elif [ "$1" = "-vconfig" ]; then
		vconfig=$1
		shift
		stopoptions=''
	elif [ "$1" = "-vcheck" ]; then
		shift
		vcheck='-v'
		stopoptions=''
	elif [ "$1" = "-pdfignore" ] || [ "$1" = "-nopdf" ]; then
		shift
		dopdf='ignore'
		stopoptions=''
	elif [ "$1" = "-forcepdf" ]; then
		shift
		dopdf='force'
		stopoptions=''
	elif [ "$1" = "-pdfcheck" ]; then
		shift
		dopdf='check'
		stopoptions=''
	elif [ "$1" = "-notimg" ]; then
		shift
		checkimg='dontcheck'
		stopoptions=''
	elif [ "$1" = "-set" ]; then	# il faut max 1 set : -set ou -ab
		shift
		sla_actionoption="-set"
		setrequested="-set"
		stopoptions=''
	elif [ "$1" = '-addbookmarks' ] || [ "$1" = '-ab' ]; then
		shift
		# option gérée dnas slacheck, on ne la passe pas à slacheckattr
		setrequested="-ab"
		stopoptions=''
			echo "Cette option n'est pas au point : selon l'étape de dev, elle crée une sauvagarde mais vide ensuite le fichier SLA donc faut y aller mollo"
			exit	
		continue
	elif [ "$1" = "-nofontcheck" ]; then
		shift
		checkfonts=''
		stopoptions=''
	elif [ "$1" = "-nocomment" ]; then
		shift
		comment=''
		stopoptions=''
	elif [ "$1" = "-vecto" ];	then
		shift
		vecto="-vecto"
		stopoptions=''
		checkfonts=''
		FontEmbedding=1 # logique booléenne inverse
		echo -e "${ESC_warning} -vecto option est EN BÉTA EXPÉRIMENTALE $ESC_normal"
	elif [ "$1" = '-nobleeds' ]; then	# overwrites config option
		shift
		stopoptions=''
		useDocBleeds="1" 
		cropMarks="0"
	elif [ "$1" = "-pagenum" ]; then
		shift
		checkpagenums='check'
		if [ "$1" = '' ]; then
			echo -e "${ESC_error} missing page numer after -pagenum$ESC_normal"
			exit;
		fi
		pagenumval="$1"
		shift
		stopoptions=''
	fi
done

# *****************************
# config for chapter file

if [ ! -f "$1.sla" ] 
then
	echo -e "${ESC_error} missing $1.sla file${ESC_normal}" 
	exit
fi

if [ -f "./$1.config" ] 
then
	. "./$1.config" $vconfig
fi


# warning : FontEmbedding = 1 when fonts are vectorized
if [ "$FontEmbedding" = 1 ] 
then
	checkfonts=''
fi

if [ "$pdf_bookmark_style" != "" ]
then 
	echo -ne "$1 : " >> bookmarks
	# xmlstarlet
	# -t -v pour récupérer la valeur du contenu de la balise ciblée ; -t -c pour récupérer le tag entier <tag>contenu</tag>

	# dernière ligne du grand titre :
	# bookmarklabel=`xmlstarlet sel -t -v  "SCRIBUSUTF8NEW/DOCUMENT/PAGEOBJECT/StoryText/para [@PARENT='$pdf_bookmark_style']/preceding-sibling::ITEXT[1]/@CH" "$1.sla"`
	# ou
	# bookmarklabel=`xmlstarlet sel -t -v  "SCRIBUSUTF8NEW/DOCUMENT/PAGEOBJECT/StoryText/trail [@PARENT='$pdf_bookmark_style']/preceding-sibling::ITEXT[1]/@CH" "$1.sla"`

	# première ligne du grand titre :
	bookmarklabel=`xmlstarlet sel -t -v  "SCRIBUSUTF8NEW/DOCUMENT/PAGEOBJECT/StoryText [para/@PARENT='$pdf_bookmark_style']/ITEXT[1]/@CH" "$1.sla"`
	if [ "$bookmarklabel" != "" ]
	then
		bookmarktag='para '
	else
		bookmarklabel=`xmlstarlet sel -t -v  "SCRIBUSUTF8NEW/DOCUMENT/PAGEOBJECT/StoryText [trail/@PARENT='$pdf_bookmark_style']/ITEXT[1]/@CH" "$1.sla"`
		bookmarktag='trail'
	fi

	if [ "$bookmarklabel" != "" ]
	then
		echo -ne " ($bookmarktag) $bookmarklabel\n" >> bookmarks
		if [ "$setrequested" == '-ab' ]
		then
			dejabookmark=`xmlstarlet sel -t -v "SCRIBUSUTF8NEW/DOCUMENT/PAGEOBJECT[StoryText/$bookmarktag[@PARENT='$pdf_bookmark_style']]/@BOOKMARK" "$1.sla"`
			if [ "$dejabookmark" == '' ]
			then
				# Let's add BOOKMARK="1" on PAGEOBJECT
				cp "$1.sla" "$1.savb4bookmarks.sla"
				xmlstarlet ed -i "SCRIBUSUTF8NEW/DOCUMENT/PAGEOBJECT[StoryText/para[@PARENT='$pdf_bookmark_style']]" -t attr -n BOOKMARK -v "1" "$1.sla" > "$1.sla"
				echo -ne "$ESC_info Bookmark set : $bookmarklabel\n"
			else
				echo -ne "$ESC_info Allready a bookmark : '$bookmarklabel'\n" 
			fi
		fi
	else
		echo -ne "$ESC_warning Paragraph with '$pdf_bookmark_style' style not found\n"
	fi
	echo -ne $ESC_normal
	# echo "=== ça donne ==="
	# xmlstarlet sel -t -c "SCRIBUSUTF8NEW/DOCUMENT/PAGEOBJECT[StoryText/$bookmarktag[@PARENT='$pdf_bookmark_style']]" "$1.sla"

fi

# *****************************
# Collect comments
#
# -H : affiche le nom de fichier
# -o : n'affiche que la partie matchant le pattern et non toute la ligne
# -i : case insensitif
# -E : c'est une regexp (permettrait d'extraire plus de caractères environnants par ex)
# -v : élimine les lignes vérifiant le pattern
# -P : perl regexp
# \K : dans une perl regexp, ne retient pas le résultat plus à gauche. Seulement ce qui suit. Requis ici car les expression lookbehind ne peuvent pas etre de longueur variable.
grep -i '<ITEXT CH\s*=\s*".*"\s*\/>' "$1.sla" | grep -oP 'CH\s*=\s*"\K.*(AAA|BBB|CCC|PPP|QQQ|RRR|SSS|WWW|XXX|YYY|ZZZ).*(?="\s*\/>)' | sed 's/\(.*\)/    \1/' > .slacheck.comments

sizecomments=$(stat -c%s .slacheck.comments)
if [ sizecomments != 0 ] 	# pas ">" (car ça crée un fichier "0") mais peut etre gt
then
	if [ "$comment" != "" ]
	then
		# -n : no newline at EOL
		# -e : manage escape
		echo -ne $ESC_notice
		cat .slacheck.comments
		rm .slacheck.comments
		echo -ne $ESC_normal
	fi
		
	echo -ne "\n## $1.sla\n" >> book.comments
	cat .slacheck.comments >> book.comments
	echo -ne "\n" >> book.comments
fi

alloptions="$vcheck $sla_actionoption"

# As for color profiles, the correct values to be checked are :
# <DOCUMENT ... DPMo="sRGB" DPPr="ISO Coated v2 300% (ECI)" DPIn="sRGB" DPInCMYK="ISO Coated v2 300% (ECI)" DPIn2="sRGB" DPIn3="ISO Coated v2 300% (ECI)" ...>
# <PDF ... SolidP="sRGB" ImageP="sRGB" PrintP="ISO Coated v2 300% (ECI)"  ...>

slacheckattr $alloptions "$1" DOCUMENT 	DPIn 		"$RGBprof" 		"RGB color profile"
slacheckattr $alloptions "$1" DOCUMENT 	DPIn2		"$RGBprof"		"RGB color profile"

slacheckattr $alloptions "$1" DOCUMENT 	DPPr 		"$CMYKprof"		"CMYK color profile"
slacheckattr $alloptions "$1" DOCUMENT 	DPInCMYK	"$CMYKprof"		"CMYK color profile"
slacheckattr $alloptions "$1" DOCUMENT 	DPIn3		"$CMYKprof"		"CMYK color profile"

slacheckattr $alloptions "$1" DOCUMENT 	AUTOMATIC	"0"				"Doc pref / hyphen"
slacheckattr $alloptions "$1" DOCUMENT 	AUTOCHECK	"1"				"Doc pref /	hyphen"


slacheckattr $alloptions "$1" PDF 		Grayscale	"$Grayscale" 	"PDF output to grayscale"
slacheckattr $alloptions "$1" PDF 		RGBMode 	"$RGBMode" 		"PDF output RGB for screen (rather than CMYK for printer)"

slacheckattr $alloptions "$1" PDF 		rangeSel 	"$rangeSel"		"PDF selected pages : 1 for a selection of pages / 0 for all pages"
# In case rangeSel is "1", rangeTxt has to be specified in each document's file config
# slacheckattr $alloptions "$1" PDF 	rangeTxt 	"$rangeSel"		"PDF for a selection of pages (or for all pages) ?"

slacheckattr $alloptions "$1" PDF		SolidP 		"$RGBprof"		"RGBcolor profile"
slacheckattr $alloptions "$1" PDF		ImageP 		"$RGBprof"		"RGB color profile"

slacheckattr $alloptions "$1" PDF		PrintP		"$CMYKprof"		"CMYK color profile"

# même sans checkfont, on check DFONT et FontEmbedding !
slacheckattr $alloptions "$1" DOCUMENT 	DFONT		"$DFONT"		"DOCUMENT's default font"
slacheckattr $alloptions "$1" PDF		FontEmbedding "$FontEmbedding"		"0 = Embeds full or subset fonts. 1=outlines = vectorise, sans fontes (logique booléenne inversée)"	
if [ "$checkfonts" = 'check' ]
then
	echo "FontEmbedding ciblé = $FontEmbedding (logique booléenne inversée)"
fi

# other PDF output checks
slacheckattr $alloptions "$1" PDF		Bookmarks	"1"				"Exporter les bookmarks définis (outlines PDF)"

slacheckattr $alloptions "$1" PDF		PicRes		"$resolution"	"Résolution des images"
slacheckattr $alloptions "$1" PDF		Resolution	"$resolution"	"Résolution des EPS"
slacheckattr $alloptions "$1" PDF		Compress	"$Compress"		"Compression des images"
slacheckattr $alloptions "$1" PDF		RecalcPic	"$RecalcPic"	"Limiter la résolution des images"
slacheckattr $alloptions "$1" PDF		CMethod		"$CMethod"		"Méthode de compression des images"
slacheckattr $alloptions "$1" PDF		Quality		"$Quality"		"Qualité de la compression des images"
slacheckattr $alloptions "$1" PDF		EmbedPDF	"$EmbedPDF"		"Embed PDFs"
slacheckattr $alloptions "$1" PDF		Version		"$PDFversion"	"Version PDF - eg 15 for 1.5"

slacheckattr $alloptions "$1" PDF	docInfoMarks 	"$docInfoMarks"	"Nom du fichier et date (+ agrandit les bleeds)"
slacheckattr $alloptions "$1" PDF	useDocBleeds 	"$useDocBleeds"	"Utiliser le fond perdu du document"
slacheckattr $alloptions "$1" PDF		BTop		"$BTop"			"Fond perdu en haut"
slacheckattr $alloptions "$1" PDF		BLeft		"$BLeft"		"Fond perdu intérieur (mais indiqué Left ?)"
slacheckattr $alloptions "$1" PDF		BRight		"$BRight"		"Fond perdu extérieur (mais indiqué Right ?)"
slacheckattr $alloptions "$1" PDF		BBottom		"$BBottom"		"Fond perdu en bas"

slacheckattr $alloptions "$1" PDF		cropMarks	"$cropMarks"	"Traits de coupe"
slacheckattr $alloptions "$1" PDF		markLength	"$markLength"	"Longueur des traits de coupe"
slacheckattr $alloptions "$1" PDF		markOffset	"$markOffset"	"Décalage des traits de coupe"

slacheckattr $alloptions "$1" PDF		bleedMarks	"$bleedMarks"	"Traits de fond perdu"
slacheckattr $alloptions "$1" PDF	registrationMarks	"$registrationMarks"	"registrationMarks"
slacheckattr $alloptions "$1" PDF	colorMarks		"$colorMarks"	"colorMarks"

# Check Pages attributes

slacheckattr $alloptions -all "$1" PAGE 		PAGEWIDTH	"$PAGEWIDTH"	"Largeur de page A5=420.944881889764"
slacheckattr $alloptions -all "$1" MASTERPAGE 	PAGEWIDTH	"$PAGEWIDTH"	"Largeur de page A5=420.944881889764"
slacheckattr $alloptions -all "$1" PAGE 		PAGEHEIGHT	"$PAGEHEIGHT"	"Hauteur de page A5=595.275590551181"
slacheckattr $alloptions -all "$1" MASTERPAGE 	PAGEHEIGHT	"$PAGEHEIGHT"	"Hauteur de page A5=595.275590551181"


echo "Attributes checked"
ls -ltr "$1.sla"

if [ "$checkpagenums" = 'check' ] && [ "$pagenumval" != '' ]
then
	slacheckattr $alloptions "$1" Section	Start 	$pagenumval		"La première page doit être la $pagenumval"
fi

if [ "$setrequested" != "" ]
then
	exit;
# else
#	echo "Attributes have been checked. In case there are mistakes you can fix them using -set option"
fi

if [ "$dopdf" = 'check' ] || [ "$dopdf" = 'create' ] || [ "$dopdf" = 'force' ]
then
	# on vérifie qu'il y a un PDF et qu'il a été généré APRÈS l'édition du SLA
	# stat -c %y n54.pdf : date de modif de n54.pdf
	if [ ! -f "$1.pdf" ]
	then
		echo Missing "$1.pdf"
	elif [ "$1.sla" -nt "$1.pdf" ]
	then
		datesla=`stat -c %y "$1.sla"`
		datepdf=`stat -c %y "$1.pdf"`
		echo -e "${ESC_warning}${ESC_normal} $1.sla has been edited and saved later than last PDF output : $1.sla = ${datesla%:*} ; $1.pdf = ${datepdf%:*}"
	fi

	if [ ! -f "$1.pdf" ] || [ "$1.sla" -nt "$1.pdf" ] || [ "$dopdf" = 'force' ]
	then
		if [ "$dopdf" = 'create' ] || [ "$dopdf" = 'force' ]
		then
			if [ -f "$1.pdf" ]
			then 
				mv "$1.pdf" "$1.pdf.bak"
				if [ -f "$1.pdf" ]
				then 
					echo -e "${ESC_error}$1.pdf couldnt be moved$ESC_normal"
				fi
			fi
			echo "Export to $1.pdf"

			path_to_here=`pwd`			# appimages require an absolute path to SLA
			if [ "$vcheck" = '' ]
			then 
				$scribuscommand -g -ns -py `which slatopdf.py` -- "$path_to_here/$1.sla" 2> /dev/null
			else
				echo $scribuscommand -g -ns -py `which slatopdf.py` -- "$path_to_here/$1.sla"
				$scribuscommand -g -ns -py `which slatopdf.py` -- "$path_to_here/$1.sla"
			fi

			if [ -f "$1.pdf" ]
			then 
				
				echo "OK $1.pdf"
			else
				echo -e "${ESC_error}$1.pdf could not be created$ESC_normal"
			fi
		fi
	fi
fi

if [ "$checkimg" = 'check' ]
then
	slacheckimages "$1"
fi

if [ "$checkfonts" = 'check' ]
then
	slacheckfonts $vecto "$1"
fi
