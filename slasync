#!/bin/bash

# set -x  # for a detailed trace

# use : slasync options master dest

# $1 : fichier sla master pour les styles 
# $2 : fichier sla à synchroniser
# tous 2 SANS l'extension .SLA
# ext=${filename##*\.} donne l'extension si on voulait gérer $1 "avec ou sans" extension SLA

. shellcolors

# default <goal>
nodes="STYLE|CHARSTYLE|NotesStyles|COLOR|MASTERPAGE"

while [ "$stopoptions" = "" ] 
do
	stopoptions=true
	
	if  [ "$1" = '-?' ] || [ "$1" = '-h' ] ; then
		echo "use : 'slasync [options] <goal> masterfile chapterfile'"
		echo "Replaces paragraph styles, character styles, notes styles, color and/or masterpages of chapterfile.sla by those in masterfile.sla"
		echo
		echo "Possible options :"
		echo "-h or -? : get this help"
		echo "-keeps <str> : keeps paragraph and character style definitions whose NAME contains <str> string in chapter. These MUST NOT be defined in master. Only works with -s or -a goal"
		echo "-trace : displays traces of operations, styles kept in chapter and nodes import-forced from master, and keeps intermediate file versions"
		echo "-tmp : dont delete intermediate useless temporary files after proceeding"
		echo
		echo "Possible goals :"
		echo "-ps : replaces paragraph styles only"
		echo "-cs : replaces character styles only"
		echo "-s : replaces both paragraph and character styles"
		echo "-ns : replaces notes styles"
		echo "-m : replaces masterpages (DOESNT WORK)"
		echo "-c : replaces colors"
		echo "-a : replaces paragraph, character and notes styles + colors and masterpages (DEFAULT)"
		echo "-nodes <node1|node2|node3> : replaces all nodes specified in pipe separated list"
		echo
		echo "masterfile and chapterfile should NOT include .sla : it will be automaticaly added"
		echo
		exit
	elif [ "$1" = '-keeps' ]; then
		shift
		if [ "$1" = "" ]; then
			echo -e "${ESC_error} missing <part> after '-keeps' option. Read the doc with -? option"
			exit
		fi
		keeps="$1"
		echo "keeps char and par styles with NAME containing '$1'"
		shift
		stopoptions=''
	elif [ "$1" = "-trace" ]; then
		trace=true
		shift
		stopoptions=''
	elif [ "$1" = "-tmp" ]; then
		keeptmp=true
		shift
		stopoptions=''
	elif [ "$1" = '-nodes' ]; then
		shift
		if [ "$1" = "" ]; then
			echo -e "${ESC_error} missing <node> after -nodes option"
			exit
		fi
		nodes=$1
	elif [ "$1" = "-s" ]; then
		nodes="STYLE|CHARSTYLE"
		shift
	elif [ "$1" = "-ps" ]; then
		nodes=STYLE
		shift
	elif [ "$1" = "-cs" ]; then
		nodes=CHARSTYLE
		shift
	elif [ "$1" = "-ns" ]; then
		nodes=NotesStyles
		shift
	elif [ "$1" = "-m" ]; then
		nodes="MASTERPAGE|MASTEROBJECT"	
		shift
	elif [ "$1" = "-c" ]; then
		nodes=COLOR
		shift
	elif [ "$1" = "-a" ]; then
		nodes="STYLE|CHARSTYLE|NotesStyles|COLOR|MASTERPAGE"
		shift
	fi
done

nodesregexp=$nodes
nodes=`echo $nodes | tr '|' '_'`

if [ "$1" = "" ]; then
	echo -e "${ESC_error} missing masterpage in slasync command. Read doc using -h"
	exit
elif [ ! -f "$1.sla" ]; then
	echo -e "${ESC_error} in slasync command : file \"$1.sla\" doesnt exist. Read doc using -?"
	exit
elif [ "$2" = "" ] ; then
	echo -e "${ESC_error} missing chapter file in slasync command. Read doc using -?"
	exit
elif [ ! -f "$2.sla" ]; then
	echo -e "${ESC_error} in slasync command : file \"$2.sla\" doesnt exist. Read doc using -?"
	exit
elif [ "$2" = "$3" ]; then
	echo -e "${ESC_error} chapter and master are identical"
	exit
fi

cp -f $2.sla $2.bak.sla
master=$1.sla
chapter=$2.sla


if [ "$trace" != "" ]; then
	echo 
	echo "Origin : $chapter is " `< $chapter wc -l` " lines long"
	ls -la "$chapter"
fi

# xmlstarlet ed -u ... -v ... : update value of path to be value (-v) or other xpath value (-x)
#	ne change pas les attributs des xpaths mais affecte leurs valeurs
#
# xmlstarlet ed -d ... : delete ; -i -t ... -v ... : insert
#
# xmlstarlet ed -d "SCRIBUSUTF8NEW/DOCUMENT/STYLE" fic.sla : retire toutes les définitions de parstyles
# 
#
# xmlstarlet sel -t -v "count(/SCRIBUSUTF8NEW/DOCUMENT/COLOR)" vide.sla
# 	renvoie le nombre de couleurs définies
# xmlstarlet sel -t -m "SCRIBUSUTF8NEW/DOCUMENT/COLOR" -c . -n vide.sla
# 	renvoie la liste de toutes les couleurs : <COLOR NAME="Black" SPACE="CMYK" C="0" M="0" Y="0" K="100"/>\n<COLOR NAME="Blue"... etc
#	"-m" : match XPATH ; "-c ." : echoes copy of XPATH expression et "-n" : echoes EOL

# Insérer des composants sur mesure : 
# echo "<x/>" | xml sel -t -m / -e xml -e child -a data -o value
# produces :
# <xml><child data="value"/></xml>
# -m / : se mettre à la racine
# -e xml : output <xml> et se mettre dedans
# -e child : output <child> et se mettre dedans
# -a data -o value : ajouter un attribut data avec la valeur value
#
# autres xpaths :
# '/xml/block/el[@name="b"]' : ceux dont l'attribut 'name' a la valeur 'b'
# '/xml/block/el[not(@name)]' : ceux qui n'ont pas d'attribut 'name'

# Capture chapter's kept nodes
if [ "$keeps" != "" ]; then
	xmlstarlet sel -t -m "SCRIBUSUTF8NEW/DOCUMENT/STYLE[contains(@NAME,'$keeps')]" -c . -n $chapter > "$chapter.kept_$nodes.xml"
	xmlstarlet sel -t -m "SCRIBUSUTF8NEW/DOCUMENT/CHARSTYLE[contains(@CNAME,'$keeps')]" -c . -n $chapter >> "$chapter.kept_$nodes.xml"
	if [ "$trace" != "" ]; then
		echo
		echo Keeping `< "$chapter.kept_$nodes.xml" wc -l` " lines in $chapter :"
		cat "$chapter.kept_$nodes.xml"
	fi
fi

# Capture master's nodes
xmlstarlet sel -t -m "SCRIBUSUTF8NEW/DOCUMENT" -m $nodesregexp -c . -n "$master" > "$master.$nodes.xml"

if [ "$trace" != "" ]; then
	echo
	echo "master"
	ls -la "$master"
	echo Found `< "$master.$nodes.xml" wc -l` " lines of $nodes in master :"
	ls -la "$master.$nodes.xml"
	cat "$master.$nodes.xml"
	echo
fi

# Empty chapter nodes
cp "$chapter" "$chapter.without_$nodes.xml" # required because > empties the destination file first
IFS=$'_'
for anode in $nodes
do
	if [ "$trace" != "" ]; then
		echo "Emptying $anode nodes"
	fi
	xmlstarlet ed -d "SCRIBUSUTF8NEW/DOCUMENT/$anode" "$chapter.without_$nodes.xml" > "$chapter.without_$nodes.tmp.xml"
	cp "$chapter.without_$nodes.tmp.xml" "$chapter.without_$nodes.xml"
done
rm "$chapter.without_$nodes.tmp.xml"

if [ "$trace" != "" ]; then
	echo 
	echo "Without $nodes : `< "$chapter.without_$nodes.xml" wc -l` lines"
	ls -la "$chapter.without_$nodes.xml"
fi

# Insert master nodes at the begining of the <DOCUMENT> previously emptied of nodes
sed "/<DOCUMENT.*>/ r $master.$nodes.xml" "$chapter.without_$nodes.xml" > result.soon.sla

if [ "$trace" != "" ]; then
	echo 
	echo "With master's $nodes :"
	ls -la "result.soon.sla"
fi

if [ "$keeps" != "" ]; then
	# Insert kept nodes
	sed "/<DOCUMENT.*>/ r $chapter.kept_$nodes.xml" result.soon.sla > "$chapter"
	if [ "$trace" != "" ]; then
		echo 
		echo "With kept $nodes :"
	fi
else
	mv result.soon.sla "$chapter"
fi

if [ "$keeptmp" = "" ]; then
	rm "$chapter.without_$nodes.xml"
	rm "$master.$nodes.xml"
	if [ -f result.soon.sla ]; then
		rm result.soon.sla
	fi
fi

if [ "$trace" != "" ]; then
	echo 
	echo "Result : $chapter is " `< "$chapter" wc -l` "lines long"
fi
ls -la "$chapter"
